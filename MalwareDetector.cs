using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;
using PVBPS_Project.Response;
using PVBPS_Project.Crypt;
using PVBPS_Project.Database;

namespace PVBPS_Project
{
    class MalwareDetector
    {
        Directory directoryToScan;

        List<ScanItem> scanItems = new List<ScanItem>();

        public MalwareDetector(Directory directory)
        {
            directoryToScan = directory;
        }

        public List<ScanItem> Scan()
        {
            List<ScanItem> foundThreats = new List<ScanItem>();
            List<string> filesToScan = directoryToScan.GetFiles();

            //compute hash
            foreach(string file in filesToScan)
            {
                string computedHash = ComputeFileHash(file);
                scanItems.Add(new ScanItem(file, computedHash));

                Console.WriteLine("File {0} with hash {1}", file, computedHash);
            }
            
            //proceed to scan
            VTApi vtApi = new VTApi();
            JsonDatabase database = new JsonDatabase();

            foreach(ScanItem item in scanItems)
            {
                ThreatDTO threatDTO = database.GetByHash(item.GetHash());
                if (threatDTO == null)
                {
                    ScanResponse scanResult = vtApi.ScanByHash(item.GetHash());
                    item.scanResult = scanResult;

                    if (scanResult != null && scanResult.IsMalware())
                    {
                        ScanReport report = vtApi.GetReport(scanResult);
                        item.reportResult = report;
                    }

                    database.Insert(item);
                }
                else
                {
                    item.scanResult = null;
                    item.reportResult = null;
                    item.stringResult = threatDTO.rate;

                }

                //encrypt file when malware detected
                AES crypto = new AES();
                crypto.Encrypt(item.GetFilename()); //comment when no needed crypt

                foundThreats.Add(item);


            }

            return foundThreats;
        }

        /**
         * Compute SHA-256 hash from file 
         */
        private string ComputeFileHash(string file)
        {
            using (FileStream stream = File.OpenRead(file))
            {
                var sha = new SHA256Managed();
                byte[] checksum = sha.ComputeHash(stream);
                return BitConverter.ToString(checksum).Replace("-", String.Empty);
            }
        }
    }
}
